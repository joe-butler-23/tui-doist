import { Guard } from '../../guard/index.mjs';
import { IsJsonPointer, IsUri } from '../../format/index.mjs';
import { Pointer } from '../../value/pointer/index.mjs';
import * as S from '../types/index.mjs';
// ------------------------------------------------------------------
// Rebase
// ------------------------------------------------------------------
export function Rebase(baseUri, schema) {
    if (!S.IsId(schema))
        return baseUri;
    if (IsUri(schema.$id))
        return schema.$id;
    if (!IsUri(schema.$id) && IsUri(baseUri)) {
        return new URL(schema.$id, baseUri).href;
    }
    return baseUri;
}
// ------------------------------------------------------------------
// Select
// ------------------------------------------------------------------
function IsHashPointer(value) {
    return IsHash(value) && IsJsonPointer(value.slice(1));
}
function IsHash(value) {
    return value.length > 0 && value[0] === '#';
}
function Select(schema, baseUri, $ref) {
    if (IsUri(baseUri)) {
        const [base, ref] = [new URL(baseUri), new URL($ref, baseUri)];
        const matched = base.pathname === ref.pathname;
        const withHash = IsHash(ref.hash);
        if (matched && !withHash) {
            return schema;
        }
    }
    if (IsHashPointer($ref)) {
        const target = Pointer.Get(schema, $ref.slice(1));
        if (S.IsSchemaLike(target))
            return target;
    }
    return undefined;
}
// ------------------------------------------------------------------
// Traversal
// ------------------------------------------------------------------
function FromObject(schema, baseUrl, ref) {
    // ----------------------------------------------------------------
    // TypeBox: Fast TCyclic Deref
    // ----------------------------------------------------------------
    if (S.IsDefs(schema) && Guard.HasPropertyKey(schema.$defs, ref.$ref)) {
        return schema.$defs[ref.$ref];
    }
    // ----------------------------------------------------------------
    // Json Schema
    // ----------------------------------------------------------------
    const rebase = Rebase(baseUrl, schema);
    const target = Select(schema, rebase, ref.$ref);
    if (S.IsSchemaLike(target))
        return target;
    // Keep searching ...
    return Object.values(schema).reduce((result, subschema) => result || FromValue(subschema, rebase, ref), undefined);
}
function FromArray(schema, baseUri, ref) {
    return schema.reduce((result, value) => result || FromValue(value, baseUri, ref), undefined);
}
function FromValue(schema, base, ref) {
    return ((Guard.IsObject(schema) && FromObject(schema, base, ref)) ||
        (Guard.IsArray(schema) && FromArray(schema, base, ref)) ||
        undefined);
}
// ------------------------------------------------------------------
// Deref
// ------------------------------------------------------------------
/** Deferences a schema with the given Ref */
export function Deref(schema, ref) {
    return FromValue(schema, '', ref);
}
