import { type TLocalizedValidationError } from '../error/index.mjs';
import { type StaticDecode, type StaticEncode, type TProperties, type TSchema, Base } from '../type/index.mjs';
export declare class Validator<Context extends TProperties = TProperties, Type extends TSchema = TSchema> extends Base<StaticEncode<Type, Context>> {
    private readonly context;
    private readonly type;
    private readonly isEvaluated;
    private readonly hasCodec;
    private readonly code;
    private readonly check;
    constructor(context: Context, type: Type);
    /** Returns true if this validator is using runtime eval optimizations */
    IsEvaluated(): boolean;
    /** Returns the Context for this validator */
    Context(): Context;
    /** Returns the Type for this validator */
    Type(): Type;
    /** Returns the generated code for this validator */
    Code(): string;
    /** Checks a value matches the Validator type. */
    Check(value: unknown): value is StaticEncode<Type, Context>;
    /** Returns errors for the given value. */
    Errors(value: unknown): TLocalizedValidationError[];
    /** Cleans a value using the Validator type. */
    Clean(value: unknown): unknown;
    /** Converts a value using the Validator type. */
    Convert(value: unknown): unknown;
    /** Creates a value using the Validator type. */
    Create(): StaticEncode<Type, Context>;
    /** Creates defaults using the Validator type. */
    Default(value: unknown): unknown;
    /** Parses a value */
    Parse(value: unknown): StaticDecode<Type, Context>;
    /** Decodes a value */
    Decode(value: unknown): StaticDecode<Type, Context>;
    /** Encodes a value */
    Encode(value: unknown): StaticEncode<Type, Context>;
}
