// --------------------------------------------------------------------------
// Primitives
// --------------------------------------------------------------------------
export function IsBoolean(value) {
    return value instanceof Boolean;
}
export function IsNumber(value) {
    return value instanceof Number;
}
export function IsString(value) {
    return value instanceof String;
}
// --------------------------------------------------------------------------
// TypeArray
// --------------------------------------------------------------------------
export function IsTypeArray(value) {
    return globalThis.ArrayBuffer.isView(value);
}
/** Returns true if the value is a Int8Array */
export function IsInt8Array(value) {
    return value instanceof globalThis.Int8Array;
}
/** Returns true if the value is a Uint8Array */
export function IsUint8Array(value) {
    return value instanceof globalThis.Uint8Array;
}
/** Returns true if the value is a Uint8ClampedArray */
export function IsUint8ClampedArray(value) {
    return value instanceof globalThis.Uint8ClampedArray;
}
/** Returns true if the value is a Int16Array */
export function IsInt16Array(value) {
    return value instanceof globalThis.Int16Array;
}
/** Returns true if the value is a Uint16Array */
export function IsUint16Array(value) {
    return value instanceof globalThis.Uint16Array;
}
/** Returns true if the value is a Int32Array */
export function IsInt32Array(value) {
    return value instanceof globalThis.Int32Array;
}
/** Returns true if the value is a Uint32Array */
export function IsUint32Array(value) {
    return value instanceof globalThis.Uint32Array;
}
/** Returns true if the value is a Float32Array */
export function IsFloat32Array(value) {
    return value instanceof globalThis.Float32Array;
}
/** Returns true if the value is a Float64Array */
export function IsFloat64Array(value) {
    return value instanceof globalThis.Float64Array;
}
/** Returns true if the value is a BigInt64Array */
export function IsBigInt64Array(value) {
    return value instanceof globalThis.BigInt64Array;
}
/** Returns true if the value is a BigUint64Array */
export function IsBigUint64Array(value) {
    return value instanceof globalThis.BigUint64Array;
}
// ------------------------------------------------------------------
// RegExp
// ------------------------------------------------------------------
/** Returns true if the value is a RegExp */
export function IsRegExp(value) {
    return value instanceof globalThis.RegExp;
}
// ------------------------------------------------------------------
// Date
// ------------------------------------------------------------------
/** Returns true if the value is a Date */
export function IsDate(value) {
    return value instanceof globalThis.Date;
}
// ------------------------------------------------------------------
// Set
// ------------------------------------------------------------------
/** Returns true if the value is a Set */
export function IsSet(value) {
    return value instanceof globalThis.Set;
}
// ------------------------------------------------------------------
// Map
// ------------------------------------------------------------------
/** Returns true if the value is a Map */
export function IsMap(value) {
    return value instanceof globalThis.Map;
}
