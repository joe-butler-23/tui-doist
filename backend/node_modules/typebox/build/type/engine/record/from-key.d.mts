import { type TSchema } from '../../types/schema.mjs';
import { type TAny } from '../../types/any.mjs';
import { type TBoolean } from '../../types/boolean.mjs';
import { type TEnum, type TEnumValue } from '../../types/enum.mjs';
import { type TIntersect } from '../../types/intersect.mjs';
import { type TInteger } from '../../types/integer.mjs';
import { type TLiteral, type TLiteralValue } from '../../types/literal.mjs';
import { type TNumber } from '../../types/number.mjs';
import { type TObject } from '../../types/object.mjs';
import { type TString } from '../../types/string.mjs';
import { type TTemplateLiteral } from '../../types/template-literal.mjs';
import { type TUnion } from '../../types/union.mjs';
import { type TFromAnyKey } from './from-key-any.mjs';
import { type TFromBooleanKey } from './from-key-boolean.mjs';
import { type TFromEnumKey } from './from-key-enum.mjs';
import { type TFromIntegerKey } from './from-key-integer.mjs';
import { type TFromIntersectKey } from './from-key-intersect.mjs';
import { type TFromLiteralKey } from './from-key-literal.mjs';
import { type TFromNumberKey } from './from-key-number.mjs';
import { type TFromStringKey } from './from-key-string.mjs';
import { type TFromTemplateKey } from './from-key-template-literal.mjs';
import { type TFromUnionKey } from './from-key-union.mjs';
export type TFromKey<Key extends TSchema, Value extends TSchema, Result extends TSchema = (Key extends TAny ? TFromAnyKey<Value> : Key extends TBoolean ? TFromBooleanKey<Value> : Key extends TEnum<infer Values extends TEnumValue[]> ? TFromEnumKey<Values, Value> : Key extends TInteger ? TFromIntegerKey<Key, Value> : Key extends TIntersect<infer Types extends TSchema[]> ? TFromIntersectKey<Types, Value> : Key extends TLiteral<infer LiteralValue extends TLiteralValue> ? TFromLiteralKey<LiteralValue, Value> : Key extends TNumber ? TFromNumberKey<Key, Value> : Key extends TString ? TFromStringKey<Key, Value> : Key extends TTemplateLiteral<infer Pattern extends string> ? TFromTemplateKey<Pattern, Value> : Key extends TUnion<infer Types extends TSchema[]> ? TFromUnionKey<Types, Value> : TObject<{}>)> = Result;
export declare function FromKey<Key extends TSchema, Value extends TSchema>(key: Key, value: Value): TFromKey<Key, Value>;
