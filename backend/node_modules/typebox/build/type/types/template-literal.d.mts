import { type TSchema, type TSchemaOptions } from './schema.mjs';
import { type TDeferred } from './deferred.mjs';
import { type TParseTemplateIntoTypes } from '../engine/patterns/template.mjs';
import { type TInstantiate } from '../engine/instantiate.mjs';
import { type TTemplateLiteralStatic } from '../engine/template-literal/static.mjs';
export type StaticTemplateLiteral<Pattern extends string> = (TTemplateLiteralStatic<Pattern>);
/** Represents a TemplateLiteral type. */
export interface TTemplateLiteral<Pattern extends string = string> extends TSchema {
    '~kind': 'TemplateLiteral';
    type: 'string';
    pattern: Pattern;
}
/** Creates a deferred TemplateLiteral action. */
export type TTemplateLiteralDeferred<Types extends TSchema[]> = (TDeferred<'TemplateLiteral', [Types]>);
/** Creates a deferred TemplateLiteral action. */
export declare function TemplateLiteralDeferred<Types extends TSchema[]>(types: [...Types], options?: TSchemaOptions): TTemplateLiteralDeferred<Types>;
export type TTemplateLiteralConstruct<Types extends TSchema[]> = (TInstantiate<{}, TTemplateLiteralDeferred<Types>>);
export declare function TemplateLiteralConstruct<Types extends TSchema[]>(types: [...Types], options?: TSchemaOptions): TTemplateLiteralConstruct<Types>;
/** Creates a TemplateLiteral type. */
export declare function TemplateLiteral<Template extends string>(template: Template, options?: TSchemaOptions): TTemplateLiteralConstruct<TParseTemplateIntoTypes<Template>>;
/** Creates a TemplateLiteral type. */
export declare function TemplateLiteral<Types extends TSchema[]>(types: [...Types], options?: TSchemaOptions): TTemplateLiteralConstruct<Types>;
/** Returns true if the given value is TTemplateLiteral. */
export declare function IsTemplateLiteral(value: unknown): value is TTemplateLiteral;
