// deno-fmt-ignore-file
import { Settings } from '../../system/settings/index.mjs';
import { IsKind } from './schema.mjs';
// ------------------------------------------------------------------
// NotImplemented
// ------------------------------------------------------------------
export class NotImplemented extends Error {
    constructor(type, method) {
        super(`Base type does not implement the '${method}' function`);
        Object.defineProperty(this, 'cause', {
            value: { type, method },
            writable: false,
            configurable: false,
            enumerable: false
        });
    }
}
// ------------------------------------------------------------------
// Type.Base<...>
// ------------------------------------------------------------------
/** Base class for creating extension types. */
export class Base {
    constructor() {
        Object.defineProperty(this, '~kind', {
            enumerable: Settings.Get().enumerableKind,
            writable: false,
            configurable: false,
            value: 'Base'
        });
        this['~guard'] = {
            check: (value) => this.Check(value),
            errors: (value) => this.Errors(value)
        };
    }
    /** Checks a value or returns false if invalid */
    Check(value) {
        return true;
    }
    /** Returns errors for a value. Return an empty array if valid.  */
    Errors(value) {
        return [];
    }
    /** Converts a value into this type */
    Convert(value) {
        return value;
    }
    /** Cleans a value according to this type */
    Clean(value) {
        return value;
    }
    /** Returns a default value for this type */
    Default(value) {
        return value;
    }
    /** Creates a new instance of this type */
    Create() {
        throw new NotImplemented(this, 'Create');
    }
}
// ------------------------------------------------------------------
// Guard
// ------------------------------------------------------------------
/** Returns true if the given value is a Base type. */
export function IsBase(value) {
    return IsKind(value, 'Base');
}
