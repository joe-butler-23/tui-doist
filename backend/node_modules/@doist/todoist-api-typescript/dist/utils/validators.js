"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.validateTask = validateTask;
exports.validateTaskArray = validateTaskArray;
exports.isWorkspaceProject = isWorkspaceProject;
exports.isPersonalProject = isPersonalProject;
exports.validateProject = validateProject;
exports.validateProjectArray = validateProjectArray;
exports.validateSection = validateSection;
exports.validateSectionArray = validateSectionArray;
exports.validateLabel = validateLabel;
exports.validateLabelArray = validateLabelArray;
exports.validateComment = validateComment;
exports.validateCommentArray = validateCommentArray;
exports.validateUser = validateUser;
exports.validateUserArray = validateUserArray;
exports.validateProductivityStats = validateProductivityStats;
exports.validateCurrentUser = validateCurrentUser;
exports.validateActivityEvent = validateActivityEvent;
exports.validateActivityEventArray = validateActivityEventArray;
var entities_1 = require("../types/entities");
function validateTask(input) {
    return entities_1.TaskSchema.parse(input);
}
function validateTaskArray(input) {
    return input.map(validateTask);
}
/**
 * Type guard to check if a project is a workspace project.
 * @param project The project to check
 * @returns True if the project is a workspace project
 */
function isWorkspaceProject(project) {
    return 'workspaceId' in project;
}
/**
 * Type guard to check if a project is a personal project.
 * @param project The project to check
 * @returns True if the project is a personal project
 */
function isPersonalProject(project) {
    return !isWorkspaceProject(project);
}
/**
 * Validates and parses a project input.
 * @param input The input to validate
 * @returns A validated project (either PersonalProject or WorkspaceProject)
 */
function validateProject(input) {
    if ('workspaceId' in input) {
        return entities_1.WorkspaceProjectSchema.parse(input);
    }
    return entities_1.PersonalProjectSchema.parse(input);
}
function validateProjectArray(input) {
    return input.map(validateProject);
}
function validateSection(input) {
    return entities_1.SectionSchema.parse(input);
}
function validateSectionArray(input) {
    return input.map(validateSection);
}
function validateLabel(input) {
    return entities_1.LabelSchema.parse(input);
}
function validateLabelArray(input) {
    return input.map(validateLabel);
}
function validateComment(input) {
    return entities_1.CommentSchema.parse(input);
}
function validateCommentArray(input) {
    return input.map(validateComment);
}
function validateUser(input) {
    return entities_1.UserSchema.parse(input);
}
function validateUserArray(input) {
    return input.map(validateUser);
}
function validateProductivityStats(input) {
    return entities_1.ProductivityStatsSchema.parse(input);
}
function validateCurrentUser(input) {
    return entities_1.CurrentUserSchema.parse(input);
}
function validateActivityEvent(input) {
    return entities_1.ActivityEventSchema.parse(input);
}
function validateActivityEventArray(input) {
    return input.map(validateActivityEvent);
}
