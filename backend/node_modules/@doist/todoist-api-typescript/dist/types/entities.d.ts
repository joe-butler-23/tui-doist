import { z } from 'zod';
export declare const DueDateSchema: z.ZodObject<{
    isRecurring: z.ZodBoolean;
    string: z.ZodString;
    date: z.ZodString;
    datetime: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    timezone: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    lang: z.ZodOptional<z.ZodNullable<z.ZodString>>;
}, z.core.$strip>;
/**
 * Represents a due date for a task.
 * @see https://todoist.com/api/v1/docs#tag/Tasks/operation/get_tasks_api_v1_tasks_get
 */
export type DueDate = z.infer<typeof DueDateSchema>;
export declare const DurationSchema: z.ZodObject<{
    amount: z.ZodNumber;
    unit: z.ZodEnum<{
        minute: "minute";
        day: "day";
    }>;
}, z.core.$strip>;
/**
 * Represents a duration for a task deadline.
 * @see https://todoist.com/api/v1/docs#tag/Tasks
 */
export type Duration = z.infer<typeof DurationSchema>;
export declare const DeadlineSchema: z.ZodObject<{
    date: z.ZodString;
    lang: z.ZodString;
}, z.core.$strip>;
/**
 * Represents a task deadline.
 */
export type Deadline = z.infer<typeof DeadlineSchema>;
export declare const TaskSchema: z.ZodPipe<z.ZodObject<{
    id: z.ZodString;
    userId: z.ZodString;
    projectId: z.ZodString;
    sectionId: z.ZodNullable<z.ZodString>;
    parentId: z.ZodNullable<z.ZodString>;
    addedByUid: z.ZodNullable<z.ZodString>;
    assignedByUid: z.ZodNullable<z.ZodString>;
    responsibleUid: z.ZodNullable<z.ZodString>;
    labels: z.ZodArray<z.ZodString>;
    deadline: z.ZodNullable<z.ZodObject<{
        date: z.ZodString;
        lang: z.ZodString;
    }, z.core.$strip>>;
    duration: z.ZodNullable<z.ZodObject<{
        amount: z.ZodNumber;
        unit: z.ZodEnum<{
            minute: "minute";
            day: "day";
        }>;
    }, z.core.$strip>>;
    checked: z.ZodBoolean;
    isDeleted: z.ZodBoolean;
    addedAt: z.ZodNullable<z.ZodString>;
    completedAt: z.ZodNullable<z.ZodString>;
    updatedAt: z.ZodNullable<z.ZodString>;
    due: z.ZodNullable<z.ZodObject<{
        isRecurring: z.ZodBoolean;
        string: z.ZodString;
        date: z.ZodString;
        datetime: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        timezone: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        lang: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    }, z.core.$strip>>;
    priority: z.ZodNumber;
    childOrder: z.ZodNumber;
    content: z.ZodString;
    description: z.ZodString;
    noteCount: z.ZodNumber;
    dayOrder: z.ZodNumber;
    isCollapsed: z.ZodBoolean;
}, z.core.$strip>, z.ZodTransform<{
    url: string;
    id: string;
    userId: string;
    projectId: string;
    sectionId: string | null;
    parentId: string | null;
    addedByUid: string | null;
    assignedByUid: string | null;
    responsibleUid: string | null;
    labels: string[];
    deadline: {
        date: string;
        lang: string;
    } | null;
    duration: {
        amount: number;
        unit: "minute" | "day";
    } | null;
    checked: boolean;
    isDeleted: boolean;
    addedAt: string | null;
    completedAt: string | null;
    updatedAt: string | null;
    due: {
        isRecurring: boolean;
        string: string;
        date: string;
        datetime?: string | null | undefined;
        timezone?: string | null | undefined;
        lang?: string | null | undefined;
    } | null;
    priority: number;
    childOrder: number;
    content: string;
    description: string;
    noteCount: number;
    dayOrder: number;
    isCollapsed: boolean;
}, {
    id: string;
    userId: string;
    projectId: string;
    sectionId: string | null;
    parentId: string | null;
    addedByUid: string | null;
    assignedByUid: string | null;
    responsibleUid: string | null;
    labels: string[];
    deadline: {
        date: string;
        lang: string;
    } | null;
    duration: {
        amount: number;
        unit: "minute" | "day";
    } | null;
    checked: boolean;
    isDeleted: boolean;
    addedAt: string | null;
    completedAt: string | null;
    updatedAt: string | null;
    due: {
        isRecurring: boolean;
        string: string;
        date: string;
        datetime?: string | null | undefined;
        timezone?: string | null | undefined;
        lang?: string | null | undefined;
    } | null;
    priority: number;
    childOrder: number;
    content: string;
    description: string;
    noteCount: number;
    dayOrder: number;
    isCollapsed: boolean;
}>>;
/**
 * Represents a task in Todoist.
 * @see https://todoist.com/api/v1/docs#tag/Tasks
 */
export type Task = z.infer<typeof TaskSchema>;
/**
 * Base schema for all project types in Todoist.
 * Contains common fields shared between personal and workspace projects.
 */
export declare const BaseProjectSchema: z.ZodObject<{
    id: z.ZodString;
    canAssignTasks: z.ZodBoolean;
    childOrder: z.ZodNumber;
    color: z.ZodString;
    createdAt: z.ZodNullable<z.ZodString>;
    isArchived: z.ZodBoolean;
    isDeleted: z.ZodBoolean;
    isFavorite: z.ZodBoolean;
    isFrozen: z.ZodBoolean;
    name: z.ZodString;
    updatedAt: z.ZodNullable<z.ZodString>;
    viewStyle: z.ZodString;
    defaultOrder: z.ZodNumber;
    description: z.ZodString;
    isCollapsed: z.ZodBoolean;
    isShared: z.ZodBoolean;
}, z.core.$strip>;
/**
 * Schema for personal projects in Todoist.
 */
export declare const PersonalProjectSchema: z.ZodPipe<z.ZodObject<{
    id: z.ZodString;
    canAssignTasks: z.ZodBoolean;
    childOrder: z.ZodNumber;
    color: z.ZodString;
    createdAt: z.ZodNullable<z.ZodString>;
    isArchived: z.ZodBoolean;
    isDeleted: z.ZodBoolean;
    isFavorite: z.ZodBoolean;
    isFrozen: z.ZodBoolean;
    name: z.ZodString;
    updatedAt: z.ZodNullable<z.ZodString>;
    viewStyle: z.ZodString;
    defaultOrder: z.ZodNumber;
    description: z.ZodString;
    isCollapsed: z.ZodBoolean;
    isShared: z.ZodBoolean;
    parentId: z.ZodNullable<z.ZodString>;
    inboxProject: z.ZodDefault<z.ZodOptional<z.ZodBoolean>>;
}, z.core.$strip>, z.ZodTransform<{
    url: string;
    id: string;
    canAssignTasks: boolean;
    childOrder: number;
    color: string;
    createdAt: string | null;
    isArchived: boolean;
    isDeleted: boolean;
    isFavorite: boolean;
    isFrozen: boolean;
    name: string;
    updatedAt: string | null;
    viewStyle: string;
    defaultOrder: number;
    description: string;
    isCollapsed: boolean;
    isShared: boolean;
    parentId: string | null;
    inboxProject: boolean;
}, {
    id: string;
    canAssignTasks: boolean;
    childOrder: number;
    color: string;
    createdAt: string | null;
    isArchived: boolean;
    isDeleted: boolean;
    isFavorite: boolean;
    isFrozen: boolean;
    name: string;
    updatedAt: string | null;
    viewStyle: string;
    defaultOrder: number;
    description: string;
    isCollapsed: boolean;
    isShared: boolean;
    parentId: string | null;
    inboxProject: boolean;
}>>;
/**
 * Schema for workspace projects in Todoist.
 */
export declare const WorkspaceProjectSchema: z.ZodPipe<z.ZodObject<{
    id: z.ZodString;
    canAssignTasks: z.ZodBoolean;
    childOrder: z.ZodNumber;
    color: z.ZodString;
    createdAt: z.ZodNullable<z.ZodString>;
    isArchived: z.ZodBoolean;
    isDeleted: z.ZodBoolean;
    isFavorite: z.ZodBoolean;
    isFrozen: z.ZodBoolean;
    name: z.ZodString;
    updatedAt: z.ZodNullable<z.ZodString>;
    viewStyle: z.ZodString;
    defaultOrder: z.ZodNumber;
    description: z.ZodString;
    isCollapsed: z.ZodBoolean;
    isShared: z.ZodBoolean;
    collaboratorRoleDefault: z.ZodString;
    folderId: z.ZodNullable<z.ZodString>;
    isInviteOnly: z.ZodNullable<z.ZodBoolean>;
    isLinkSharingEnabled: z.ZodBoolean;
    role: z.ZodNullable<z.ZodString>;
    status: z.ZodString;
    workspaceId: z.ZodString;
}, z.core.$strip>, z.ZodTransform<{
    url: string;
    id: string;
    canAssignTasks: boolean;
    childOrder: number;
    color: string;
    createdAt: string | null;
    isArchived: boolean;
    isDeleted: boolean;
    isFavorite: boolean;
    isFrozen: boolean;
    name: string;
    updatedAt: string | null;
    viewStyle: string;
    defaultOrder: number;
    description: string;
    isCollapsed: boolean;
    isShared: boolean;
    collaboratorRoleDefault: string;
    folderId: string | null;
    isInviteOnly: boolean | null;
    isLinkSharingEnabled: boolean;
    role: string | null;
    status: string;
    workspaceId: string;
}, {
    id: string;
    canAssignTasks: boolean;
    childOrder: number;
    color: string;
    createdAt: string | null;
    isArchived: boolean;
    isDeleted: boolean;
    isFavorite: boolean;
    isFrozen: boolean;
    name: string;
    updatedAt: string | null;
    viewStyle: string;
    defaultOrder: number;
    description: string;
    isCollapsed: boolean;
    isShared: boolean;
    collaboratorRoleDefault: string;
    folderId: string | null;
    isInviteOnly: boolean | null;
    isLinkSharingEnabled: boolean;
    role: string | null;
    status: string;
    workspaceId: string;
}>>;
/**
 * Represents a personal project in Todoist.
 * @see https://todoist.com/api/v1/docs#tag/Projects
 */
export type PersonalProject = z.infer<typeof PersonalProjectSchema>;
/**
 * Represents a workspace project in Todoist.
 * @see https://todoist.com/api/v1/docs#tag/Projects
 */
export type WorkspaceProject = z.infer<typeof WorkspaceProjectSchema>;
/**
 * @see https://todoist.com/api/v1/docs#tag/Projects
 */
export type ProjectViewStyle = 'list' | 'board' | 'calendar';
export declare const SectionSchema: z.ZodPipe<z.ZodObject<{
    id: z.ZodString;
    userId: z.ZodString;
    projectId: z.ZodString;
    addedAt: z.ZodString;
    updatedAt: z.ZodString;
    archivedAt: z.ZodNullable<z.ZodString>;
    name: z.ZodString;
    sectionOrder: z.ZodNumber;
    isArchived: z.ZodBoolean;
    isDeleted: z.ZodBoolean;
    isCollapsed: z.ZodBoolean;
}, z.core.$strip>, z.ZodTransform<{
    url: string;
    id: string;
    userId: string;
    projectId: string;
    addedAt: string;
    updatedAt: string;
    archivedAt: string | null;
    name: string;
    sectionOrder: number;
    isArchived: boolean;
    isDeleted: boolean;
    isCollapsed: boolean;
}, {
    id: string;
    userId: string;
    projectId: string;
    addedAt: string;
    updatedAt: string;
    archivedAt: string | null;
    name: string;
    sectionOrder: number;
    isArchived: boolean;
    isDeleted: boolean;
    isCollapsed: boolean;
}>>;
/**
 * Represents a section in a Todoist project.
 * @see https://todoist.com/api/v1/docs#tag/Sections
 */
export type Section = z.infer<typeof SectionSchema>;
export declare const LabelSchema: z.ZodObject<{
    id: z.ZodString;
    order: z.ZodNullable<z.ZodNumber>;
    name: z.ZodString;
    color: z.ZodString;
    isFavorite: z.ZodBoolean;
}, z.core.$strip>;
/**
 * Represents a label in Todoist.
 * @see https://todoist.com/api/v1/docs#tag/Labels
 */
export type Label = z.infer<typeof LabelSchema>;
export declare const AttachmentSchema: z.ZodObject<{
    resourceType: z.ZodString;
    fileName: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    fileSize: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    fileType: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    fileUrl: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    fileDuration: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    uploadState: z.ZodOptional<z.ZodNullable<z.ZodEnum<{
        pending: "pending";
        completed: "completed";
    }>>>;
    image: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    imageWidth: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    imageHeight: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    url: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    title: z.ZodOptional<z.ZodNullable<z.ZodString>>;
}, z.core.$strip>;
/**
 * Represents a file attachment in a comment.
 * @see https://todoist.com/api/v1/docs#tag/Sync/Comments/File-Attachments
 */
export type Attachment = z.infer<typeof AttachmentSchema>;
export declare const RawCommentSchema: z.ZodObject<{
    id: z.ZodString;
    itemId: z.ZodOptional<z.ZodString>;
    projectId: z.ZodOptional<z.ZodString>;
    content: z.ZodString;
    postedAt: z.ZodString;
    fileAttachment: z.ZodNullable<z.ZodObject<{
        resourceType: z.ZodString;
        fileName: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        fileSize: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        fileType: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        fileUrl: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        fileDuration: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        uploadState: z.ZodOptional<z.ZodNullable<z.ZodEnum<{
            pending: "pending";
            completed: "completed";
        }>>>;
        image: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        imageWidth: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        imageHeight: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        url: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        title: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    }, z.core.$strip>>;
    postedUid: z.ZodString;
    uidsToNotify: z.ZodNullable<z.ZodArray<z.ZodString>>;
    reactions: z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodArray<z.ZodString>>>;
    isDeleted: z.ZodBoolean;
}, z.core.$strip>;
/**
 * Represents a raw comment response from the API.
 * @see https://todoist.com/api/v1/docs#tag/Comments
 */
export type RawComment = z.infer<typeof RawCommentSchema>;
export declare const CommentSchema: z.ZodPipe<z.ZodObject<{
    id: z.ZodString;
    itemId: z.ZodOptional<z.ZodString>;
    projectId: z.ZodOptional<z.ZodString>;
    content: z.ZodString;
    postedAt: z.ZodString;
    fileAttachment: z.ZodNullable<z.ZodObject<{
        resourceType: z.ZodString;
        fileName: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        fileSize: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        fileType: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        fileUrl: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        fileDuration: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        uploadState: z.ZodOptional<z.ZodNullable<z.ZodEnum<{
            pending: "pending";
            completed: "completed";
        }>>>;
        image: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        imageWidth: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        imageHeight: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
        url: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        title: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    }, z.core.$strip>>;
    postedUid: z.ZodString;
    uidsToNotify: z.ZodNullable<z.ZodArray<z.ZodString>>;
    reactions: z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodArray<z.ZodString>>>;
    isDeleted: z.ZodBoolean;
}, z.core.$strip>, z.ZodTransform<{
    taskId: string | undefined;
    id: string;
    content: string;
    postedAt: string;
    fileAttachment: {
        resourceType: string;
        fileName?: string | null | undefined;
        fileSize?: number | null | undefined;
        fileType?: string | null | undefined;
        fileUrl?: string | null | undefined;
        fileDuration?: number | null | undefined;
        uploadState?: "pending" | "completed" | null | undefined;
        image?: string | null | undefined;
        imageWidth?: number | null | undefined;
        imageHeight?: number | null | undefined;
        url?: string | null | undefined;
        title?: string | null | undefined;
    } | null;
    postedUid: string;
    uidsToNotify: string[] | null;
    reactions: Record<string, string[]> | null;
    isDeleted: boolean;
    projectId?: string | undefined;
}, {
    id: string;
    content: string;
    postedAt: string;
    fileAttachment: {
        resourceType: string;
        fileName?: string | null | undefined;
        fileSize?: number | null | undefined;
        fileType?: string | null | undefined;
        fileUrl?: string | null | undefined;
        fileDuration?: number | null | undefined;
        uploadState?: "pending" | "completed" | null | undefined;
        image?: string | null | undefined;
        imageWidth?: number | null | undefined;
        imageHeight?: number | null | undefined;
        url?: string | null | undefined;
        title?: string | null | undefined;
    } | null;
    postedUid: string;
    uidsToNotify: string[] | null;
    reactions: Record<string, string[]> | null;
    isDeleted: boolean;
    itemId?: string | undefined;
    projectId?: string | undefined;
}>>;
/**
 * Represents a comment in Todoist.
 * @see https://todoist.com/api/v1/docs#tag/Comments
 */
export type Comment = z.infer<typeof CommentSchema>;
export declare const UserSchema: z.ZodObject<{
    id: z.ZodString;
    name: z.ZodString;
    email: z.ZodString;
}, z.core.$strip>;
/**
 * Represents a user in Todoist (simplified for collaborators).
 * @see https://todoist.com/api/v1/docs#tag/User
 */
export type User = z.infer<typeof UserSchema>;
export declare const TimezoneInfoSchema: z.ZodObject<{
    gmtString: z.ZodString;
    hours: z.ZodNumber;
    isDst: z.ZodNumber;
    minutes: z.ZodNumber;
    timezone: z.ZodString;
}, z.core.$strip>;
export declare const CurrentUserSchema: z.ZodObject<{
    id: z.ZodString;
    email: z.ZodString;
    fullName: z.ZodString;
    avatarBig: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    avatarMedium: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    avatarS640: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    avatarSmall: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    businessAccountId: z.ZodNullable<z.ZodString>;
    isPremium: z.ZodBoolean;
    dateFormat: z.ZodNumber;
    timeFormat: z.ZodNumber;
    weeklyGoal: z.ZodNumber;
    dailyGoal: z.ZodNumber;
    completedCount: z.ZodNumber;
    completedToday: z.ZodNumber;
    karma: z.ZodNumber;
    karmaTrend: z.ZodString;
    lang: z.ZodString;
    nextWeek: z.ZodNumber;
    startDay: z.ZodNumber;
    startPage: z.ZodString;
    tzInfo: z.ZodObject<{
        gmtString: z.ZodString;
        hours: z.ZodNumber;
        isDst: z.ZodNumber;
        minutes: z.ZodNumber;
        timezone: z.ZodString;
    }, z.core.$strip>;
    inboxProjectId: z.ZodString;
    daysOff: z.ZodArray<z.ZodNumber>;
    weekendStartDay: z.ZodNumber;
}, z.core.$strip>;
/**
 * Represents the current authenticated user with detailed information.
 * @see https://todoist.com/api/v1/docs#tag/User
 */
export type CurrentUser = z.infer<typeof CurrentUserSchema>;
export declare const ProductivityStatsSchema: z.ZodObject<{
    completedCount: z.ZodNumber;
    daysItems: z.ZodArray<z.ZodObject<{
        items: z.ZodArray<z.ZodObject<{
            id: z.ZodString;
            completed: z.ZodNumber;
        }, z.core.$strip>>;
        totalCompleted: z.ZodNumber;
        date: z.ZodString;
    }, z.core.$strip>>;
    goals: z.ZodObject<{
        currentDailyStreak: z.ZodObject<{
            count: z.ZodNumber;
            start: z.ZodString;
            end: z.ZodString;
        }, z.core.$strip>;
        currentWeeklyStreak: z.ZodObject<{
            count: z.ZodNumber;
            start: z.ZodString;
            end: z.ZodString;
        }, z.core.$strip>;
        dailyGoal: z.ZodNumber;
        ignoreDays: z.ZodArray<z.ZodNumber>;
        karmaDisabled: z.ZodNumber;
        lastDailyStreak: z.ZodObject<{
            count: z.ZodNumber;
            start: z.ZodString;
            end: z.ZodString;
        }, z.core.$strip>;
        lastWeeklyStreak: z.ZodObject<{
            count: z.ZodNumber;
            start: z.ZodString;
            end: z.ZodString;
        }, z.core.$strip>;
        maxDailyStreak: z.ZodObject<{
            count: z.ZodNumber;
            start: z.ZodString;
            end: z.ZodString;
        }, z.core.$strip>;
        maxWeeklyStreak: z.ZodObject<{
            count: z.ZodNumber;
            start: z.ZodString;
            end: z.ZodString;
        }, z.core.$strip>;
        user: z.ZodString;
        userId: z.ZodString;
        vacationMode: z.ZodNumber;
        weeklyGoal: z.ZodNumber;
    }, z.core.$strip>;
    karma: z.ZodNumber;
    karmaGraphData: z.ZodArray<z.ZodObject<{
        date: z.ZodString;
        karmaAvg: z.ZodNumber;
    }, z.core.$strip>>;
    karmaLastUpdate: z.ZodNumber;
    karmaTrend: z.ZodString;
    karmaUpdateReasons: z.ZodArray<z.ZodObject<{
        time: z.ZodString;
        newKarma: z.ZodNumber;
        positiveKarma: z.ZodNumber;
        negativeKarma: z.ZodNumber;
        positiveKarmaReasons: z.ZodArray<z.ZodAny>;
        negativeKarmaReasons: z.ZodArray<z.ZodAny>;
    }, z.core.$strip>>;
    projectColors: z.ZodRecord<z.ZodString, z.ZodString>;
    weekItems: z.ZodArray<z.ZodObject<{
        items: z.ZodArray<z.ZodObject<{
            id: z.ZodString;
            completed: z.ZodNumber;
        }, z.core.$strip>>;
        totalCompleted: z.ZodNumber;
        from: z.ZodString;
        to: z.ZodString;
    }, z.core.$strip>>;
}, z.core.$strip>;
/**
 * Represents the Productivity stats for the authenticated user.
 * @see https://developer.todoist.com/api/v1/#tag/User/operation/get_productivity_stats_api_v1_tasks_completed_stats_get
 */
export type ProductivityStats = z.infer<typeof ProductivityStatsSchema>;
export declare const ColorSchema: z.ZodObject<{
    id: z.ZodNumber;
    key: z.ZodString;
    displayName: z.ZodString;
    name: z.ZodString;
    hexValue: z.ZodString;
    value: z.ZodString;
}, z.core.$strip>;
/**
 * Represents a color in Todoist.
 * @see https://todoist.com/api/v1/docs#tag/Colors
 */
export type Color = z.infer<typeof ColorSchema>;
/**
 * @deprecated Use 'task' instead. This will be removed in the next major version.
 */
type DeprecatedItem = 'item';
/**
 * @deprecated Use 'comment' instead. This will be removed in the next major version.
 */
type DeprecatedNote = 'note';
/**
 * Type hints for known object types. Accepts any string for forward compatibility.
 * Supports both modern naming ('task', 'comment') and legacy naming ('item', 'note').
 *
 * **Note**: The legacy values 'item' and 'note' are deprecated. Use 'task' and 'comment' instead.
 */
export type ActivityObjectType = 'task' | 'comment' | 'project' | DeprecatedItem | DeprecatedNote | (string & Record<string, never>);
/**
 * Type hints for known event types. Accepts any string for forward compatibility.
 */
export type ActivityEventType = 'added' | 'updated' | 'deleted' | 'completed' | 'uncompleted' | 'archived' | 'unarchived' | 'shared' | 'left' | (string & Record<string, never>);
/**
 * Flexible object containing event-specific data.
 * Uses z.record to accept any properties for forward compatibility.
 */
export declare const ActivityEventExtraDataSchema: z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodAny>>;
export type ActivityEventExtraData = z.infer<typeof ActivityEventExtraDataSchema>;
/**
 * Activity log event schema. Accepts unknown fields for forward compatibility.
 */
export declare const ActivityEventSchema: z.ZodObject<{
    objectType: z.ZodString;
    objectId: z.ZodString;
    eventType: z.ZodString;
    eventDate: z.ZodString;
    id: z.ZodNullable<z.ZodString>;
    parentProjectId: z.ZodNullable<z.ZodString>;
    parentItemId: z.ZodNullable<z.ZodString>;
    initiatorId: z.ZodNullable<z.ZodString>;
    extraData: z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodAny>>;
}, z.core.$catchall<z.ZodAny>>;
/**
 * Represents an activity log event in Todoist.
 */
export type ActivityEvent = z.infer<typeof ActivityEventSchema>;
export {};
