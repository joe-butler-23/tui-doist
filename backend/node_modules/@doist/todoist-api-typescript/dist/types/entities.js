"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ActivityEventSchema = exports.ActivityEventExtraDataSchema = exports.ColorSchema = exports.ProductivityStatsSchema = exports.CurrentUserSchema = exports.TimezoneInfoSchema = exports.UserSchema = exports.CommentSchema = exports.RawCommentSchema = exports.AttachmentSchema = exports.LabelSchema = exports.SectionSchema = exports.WorkspaceProjectSchema = exports.PersonalProjectSchema = exports.BaseProjectSchema = exports.TaskSchema = exports.DeadlineSchema = exports.DurationSchema = exports.DueDateSchema = void 0;
var zod_1 = require("zod");
var urlHelpers_1 = require("../utils/urlHelpers");
exports.DueDateSchema = zod_1.z
    .object({
    isRecurring: zod_1.z.boolean(),
    string: zod_1.z.string(),
    date: zod_1.z.string(),
})
    .extend({
    datetime: zod_1.z.string().nullable().optional(),
    timezone: zod_1.z.string().nullable().optional(),
    lang: zod_1.z.string().nullable().optional(),
});
exports.DurationSchema = zod_1.z.object({
    amount: zod_1.z.number().positive('Value should be greater than zero'),
    unit: zod_1.z.enum(['minute', 'day']),
});
exports.DeadlineSchema = zod_1.z.object({
    date: zod_1.z.string(),
    lang: zod_1.z.string(),
});
exports.TaskSchema = zod_1.z
    .object({
    id: zod_1.z.string(),
    userId: zod_1.z.string(),
    projectId: zod_1.z.string(),
    sectionId: zod_1.z.string().nullable(),
    parentId: zod_1.z.string().nullable(),
    addedByUid: zod_1.z.string().nullable(),
    assignedByUid: zod_1.z.string().nullable(),
    responsibleUid: zod_1.z.string().nullable(),
    labels: zod_1.z.array(zod_1.z.string()),
    deadline: exports.DeadlineSchema.nullable(),
    duration: exports.DurationSchema.nullable(),
    checked: zod_1.z.boolean(),
    isDeleted: zod_1.z.boolean(),
    addedAt: zod_1.z.string().nullable(),
    completedAt: zod_1.z.string().nullable(),
    updatedAt: zod_1.z.string().nullable(),
    due: exports.DueDateSchema.nullable(),
    priority: zod_1.z.number().int(),
    childOrder: zod_1.z.number().int(),
    content: zod_1.z.string(),
    description: zod_1.z.string(),
    noteCount: zod_1.z.number().int(),
    dayOrder: zod_1.z.number().int(),
    isCollapsed: zod_1.z.boolean(),
})
    .transform(function (data) {
    return __assign(__assign({}, data), { url: (0, urlHelpers_1.getTaskUrl)(data.id, data.content) });
});
/**
 * Base schema for all project types in Todoist.
 * Contains common fields shared between personal and workspace projects.
 */
exports.BaseProjectSchema = zod_1.z.object({
    id: zod_1.z.string(),
    canAssignTasks: zod_1.z.boolean(),
    childOrder: zod_1.z.number().int(),
    color: zod_1.z.string(),
    createdAt: zod_1.z.string().nullable(),
    isArchived: zod_1.z.boolean(),
    isDeleted: zod_1.z.boolean(),
    isFavorite: zod_1.z.boolean(),
    isFrozen: zod_1.z.boolean(),
    name: zod_1.z.string(),
    updatedAt: zod_1.z.string().nullable(),
    viewStyle: zod_1.z.string(),
    defaultOrder: zod_1.z.number().int(),
    description: zod_1.z.string(),
    isCollapsed: zod_1.z.boolean(),
    isShared: zod_1.z.boolean(),
});
/**
 * Schema for personal projects in Todoist.
 */
exports.PersonalProjectSchema = exports.BaseProjectSchema.extend({
    parentId: zod_1.z.string().nullable(),
    inboxProject: zod_1.z.boolean().optional().default(false),
}).transform(function (data) {
    return __assign(__assign({}, data), { url: (0, urlHelpers_1.getProjectUrl)(data.id, data.name) });
});
/**
 * Schema for workspace projects in Todoist.
 */
exports.WorkspaceProjectSchema = exports.BaseProjectSchema.extend({
    collaboratorRoleDefault: zod_1.z.string(),
    folderId: zod_1.z.string().nullable(),
    isInviteOnly: zod_1.z.boolean().nullable(),
    isLinkSharingEnabled: zod_1.z.boolean(),
    role: zod_1.z.string().nullable(),
    status: zod_1.z.string(),
    workspaceId: zod_1.z.string(),
}).transform(function (data) {
    return __assign(__assign({}, data), { url: (0, urlHelpers_1.getProjectUrl)(data.id, data.name) });
});
exports.SectionSchema = zod_1.z
    .object({
    id: zod_1.z.string(),
    userId: zod_1.z.string(),
    projectId: zod_1.z.string(),
    addedAt: zod_1.z.string(),
    updatedAt: zod_1.z.string(),
    archivedAt: zod_1.z.string().nullable(),
    name: zod_1.z.string(),
    sectionOrder: zod_1.z.number().int(),
    isArchived: zod_1.z.boolean(),
    isDeleted: zod_1.z.boolean(),
    isCollapsed: zod_1.z.boolean(),
})
    .transform(function (data) {
    return __assign(__assign({}, data), { url: (0, urlHelpers_1.getSectionUrl)(data.id, data.name) });
});
exports.LabelSchema = zod_1.z.object({
    id: zod_1.z.string(),
    order: zod_1.z.number().int().nullable(),
    name: zod_1.z.string(),
    color: zod_1.z.string(),
    isFavorite: zod_1.z.boolean(),
});
exports.AttachmentSchema = zod_1.z
    .object({
    resourceType: zod_1.z.string(),
})
    .extend({
    fileName: zod_1.z.string().nullable().optional(),
    fileSize: zod_1.z.number().int().nullable().optional(),
    fileType: zod_1.z.string().nullable().optional(),
    fileUrl: zod_1.z.string().nullable().optional(),
    fileDuration: zod_1.z.number().int().nullable().optional(),
    uploadState: zod_1.z.enum(['pending', 'completed']).nullable().optional(),
    image: zod_1.z.string().nullable().optional(),
    imageWidth: zod_1.z.number().int().nullable().optional(),
    imageHeight: zod_1.z.number().int().nullable().optional(),
    url: zod_1.z.string().nullable().optional(),
    title: zod_1.z.string().nullable().optional(),
});
exports.RawCommentSchema = zod_1.z
    .object({
    id: zod_1.z.string(),
    itemId: zod_1.z.string().optional(),
    projectId: zod_1.z.string().optional(),
    content: zod_1.z.string(),
    postedAt: zod_1.z.string(),
    fileAttachment: exports.AttachmentSchema.nullable(),
    postedUid: zod_1.z.string(),
    uidsToNotify: zod_1.z.array(zod_1.z.string()).nullable(),
    reactions: zod_1.z.record(zod_1.z.string(), zod_1.z.array(zod_1.z.string())).nullable(),
    isDeleted: zod_1.z.boolean(),
})
    .refine(function (data) {
    // At least one of itemId or projectId must be present
    return ((data.itemId !== undefined && data.projectId === undefined) ||
        (data.itemId === undefined && data.projectId !== undefined));
}, {
    message: 'Exactly one of itemId or projectId must be provided',
});
exports.CommentSchema = exports.RawCommentSchema.transform(function (data) {
    var itemId = data.itemId, rest = __rest(data, ["itemId"]);
    return __assign(__assign({}, rest), { 
        // Map itemId to taskId for backwards compatibility
        taskId: itemId });
});
exports.UserSchema = zod_1.z.object({
    id: zod_1.z.string(),
    name: zod_1.z.string(),
    email: zod_1.z.string(),
});
exports.TimezoneInfoSchema = zod_1.z.object({
    gmtString: zod_1.z.string(),
    hours: zod_1.z.number().int(),
    isDst: zod_1.z.number().int(),
    minutes: zod_1.z.number().int(),
    timezone: zod_1.z.string(),
});
exports.CurrentUserSchema = zod_1.z.object({
    id: zod_1.z.string(),
    email: zod_1.z.string(),
    fullName: zod_1.z.string(),
    avatarBig: zod_1.z.string().nullish(),
    avatarMedium: zod_1.z.string().nullish(),
    avatarS640: zod_1.z.string().nullish(),
    avatarSmall: zod_1.z.string().nullish(),
    businessAccountId: zod_1.z.string().nullable(),
    isPremium: zod_1.z.boolean(),
    dateFormat: zod_1.z.number().int(),
    timeFormat: zod_1.z.number().int(),
    weeklyGoal: zod_1.z.number().int(),
    dailyGoal: zod_1.z.number().int(),
    completedCount: zod_1.z.number().int(),
    completedToday: zod_1.z.number().int(),
    karma: zod_1.z.number(),
    karmaTrend: zod_1.z.string(),
    lang: zod_1.z.string(),
    nextWeek: zod_1.z.number().int(),
    startDay: zod_1.z.number().int(),
    startPage: zod_1.z.string(),
    tzInfo: exports.TimezoneInfoSchema,
    inboxProjectId: zod_1.z.string(),
    daysOff: zod_1.z.array(zod_1.z.number().int()),
    weekendStartDay: zod_1.z.number().int(),
});
var StreakSchema = zod_1.z.object({
    count: zod_1.z.number(),
    start: zod_1.z.string(),
    end: zod_1.z.string(),
});
var CompletedItemSchema = zod_1.z.object({
    id: zod_1.z.string(),
    completed: zod_1.z.number(),
});
var ItemsWithDateSchema = zod_1.z.object({
    items: zod_1.z.array(CompletedItemSchema),
    totalCompleted: zod_1.z.number(),
});
var KarmaUpdateSchema = zod_1.z.object({
    time: zod_1.z.string(),
    newKarma: zod_1.z.number(),
    positiveKarma: zod_1.z.number(),
    negativeKarma: zod_1.z.number(),
    positiveKarmaReasons: zod_1.z.array(zod_1.z.any()),
    negativeKarmaReasons: zod_1.z.array(zod_1.z.any()),
});
exports.ProductivityStatsSchema = zod_1.z.object({
    completedCount: zod_1.z.number(),
    daysItems: zod_1.z.array(ItemsWithDateSchema.extend({
        date: zod_1.z.string(),
    })),
    goals: zod_1.z.object({
        currentDailyStreak: StreakSchema,
        currentWeeklyStreak: StreakSchema,
        dailyGoal: zod_1.z.number(),
        ignoreDays: zod_1.z.array(zod_1.z.number()),
        karmaDisabled: zod_1.z.number(),
        lastDailyStreak: StreakSchema,
        lastWeeklyStreak: StreakSchema,
        maxDailyStreak: StreakSchema,
        maxWeeklyStreak: StreakSchema,
        user: zod_1.z.string(),
        userId: zod_1.z.string(),
        vacationMode: zod_1.z.number(),
        weeklyGoal: zod_1.z.number(),
    }),
    karma: zod_1.z.number(),
    karmaGraphData: zod_1.z.array(zod_1.z.object({
        date: zod_1.z.string(),
        karmaAvg: zod_1.z.number(),
    })),
    karmaLastUpdate: zod_1.z.number(),
    karmaTrend: zod_1.z.string(),
    karmaUpdateReasons: zod_1.z.array(KarmaUpdateSchema),
    projectColors: zod_1.z.record(zod_1.z.string(), zod_1.z.string()),
    weekItems: zod_1.z.array(ItemsWithDateSchema.extend({
        from: zod_1.z.string(),
        to: zod_1.z.string(),
    })),
});
exports.ColorSchema = zod_1.z.object({
    /** @deprecated No longer used */
    id: zod_1.z.number(),
    /** The key of the color (i.e. 'berry_red') */
    key: zod_1.z.string(),
    /** The display name of the color (i.e. 'Berry Red') */
    displayName: zod_1.z.string(),
    /** @deprecated Use {@link Color.displayName} instead */
    name: zod_1.z.string(),
    /** The hex value of the color (i.e. '#b8255f') */
    hexValue: zod_1.z.string(),
    /**
     * @deprecated Use {@link Color.hexValue} instead
     */
    value: zod_1.z.string(),
});
/**
 * Flexible object containing event-specific data.
 * Uses z.record to accept any properties for forward compatibility.
 */
exports.ActivityEventExtraDataSchema = zod_1.z.record(zod_1.z.string(), zod_1.z.any()).nullable();
/**
 * Activity log event schema. Accepts unknown fields for forward compatibility.
 */
exports.ActivityEventSchema = zod_1.z
    .object({
    objectType: zod_1.z.string(),
    objectId: zod_1.z.string(),
    eventType: zod_1.z.string(),
    eventDate: zod_1.z.string(),
    id: zod_1.z.string().nullable(),
    parentProjectId: zod_1.z.string().nullable(),
    parentItemId: zod_1.z.string().nullable(),
    initiatorId: zod_1.z.string().nullable(),
    extraData: exports.ActivityEventExtraDataSchema,
})
    .catchall(zod_1.z.any());
