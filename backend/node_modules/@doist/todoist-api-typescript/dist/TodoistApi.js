"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g = Object.create((typeof Iterator === "function" ? Iterator : Object).prototype);
    return g.next = verb(0), g["throw"] = verb(1), g["return"] = verb(2), typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TodoistApi = void 0;
var restClient_1 = require("./restClient");
var endpoints_1 = require("./consts/endpoints");
var validators_1 = require("./utils/validators");
var urlHelpers_1 = require("./utils/urlHelpers");
var activity_helpers_1 = require("./utils/activity-helpers");
var zod_1 = require("zod");
var uuid_1 = require("uuid");
var types_1 = require("./types");
var MAX_COMMAND_COUNT = 100;
/**
 * Joins path segments using `/` separator.
 * @param segments A list of **valid** path segments.
 * @returns A joined path.
 */
function generatePath() {
    var segments = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        segments[_i] = arguments[_i];
    }
    return segments.join('/');
}
/**
 * A client for interacting with the Todoist API v1.
 * This class provides methods to manage tasks, projects, sections, labels, and comments in Todoist.
 *
 * @example
 * ```typescript
 * const api = new TodoistApi('your-api-token');
 *
 * // Get all tasks
 * const tasks = await api.getTasks();
 *
 * // Create a new task
 * const newTask = await api.addTask({
 *   content: 'My new task',
 *   projectId: '12345'
 * });
 * ```
 *
 * For more information about the Todoist API v1, see the [official documentation](https://todoist.com/api/v1).
 * If you're migrating from v9, please refer to the [migration guide](https://todoist.com/api/v1/docs#tag/Migrating-from-v9).
 */
var TodoistApi = /** @class */ (function () {
    function TodoistApi(
    /**
     * Your Todoist API token.
     */
    authToken, 
    /**
     * Optional custom API base URL. If not provided, defaults to Todoist's standard API endpoint
     */
    baseUrl) {
        this.authToken = authToken;
        this.syncApiBase = (0, endpoints_1.getSyncBaseUri)(baseUrl);
    }
    /**
     * Retrieves information about the authenticated user.
     *
     * @returns A promise that resolves to the current user's information.
     */
    TodoistApi.prototype.getUser = function () {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, (0, restClient_1.request)('GET', this.syncApiBase, endpoints_1.ENDPOINT_REST_USER, this.authToken)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, (0, validators_1.validateCurrentUser)(response.data)];
                }
            });
        });
    };
    /**
     * Retrieves a single active (non-completed) task by its ID.
     *
     * @param id - The unique identifier of the task.
     * @returns A promise that resolves to the requested task.
     */
    TodoistApi.prototype.getTask = function (id) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        zod_1.z.string().parse(id);
                        return [4 /*yield*/, (0, restClient_1.request)('GET', this.syncApiBase, generatePath(endpoints_1.ENDPOINT_REST_TASKS, id), this.authToken)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, (0, validators_1.validateTask)(response.data)];
                }
            });
        });
    };
    /**
     * Retrieves a list of active tasks filtered by specific parameters.
     *
     * @param args - Filter parameters such as project ID, label ID, or due date.
     * @returns A promise that resolves to an array of tasks.
     */
    TodoistApi.prototype.getTasks = function () {
        return __awaiter(this, arguments, void 0, function (args) {
            var _a, results, nextCursor;
            if (args === void 0) { args = {}; }
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, (0, restClient_1.request)('GET', this.syncApiBase, endpoints_1.ENDPOINT_REST_TASKS, this.authToken, args)];
                    case 1:
                        _a = (_b.sent()).data, results = _a.results, nextCursor = _a.nextCursor;
                        return [2 /*return*/, {
                                results: (0, validators_1.validateTaskArray)(results),
                                nextCursor: nextCursor,
                            }];
                }
            });
        });
    };
    /**
     * Retrieves tasks filtered by a filter string.
     *
     * @param args - Parameters for filtering tasks, including the query string and optional language.
     * @returns A promise that resolves to a paginated response of tasks.
     */
    TodoistApi.prototype.getTasksByFilter = function (args) {
        return __awaiter(this, void 0, void 0, function () {
            var _a, results, nextCursor;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, (0, restClient_1.request)('GET', this.syncApiBase, endpoints_1.ENDPOINT_REST_TASKS_FILTER, this.authToken, args)];
                    case 1:
                        _a = (_b.sent()).data, results = _a.results, nextCursor = _a.nextCursor;
                        return [2 /*return*/, {
                                results: (0, validators_1.validateTaskArray)(results),
                                nextCursor: nextCursor,
                            }];
                }
            });
        });
    };
    /**
     * Retrieves completed tasks by completion date.
     *
     * @param args - Parameters for filtering, including required since, until.
     * @returns A promise that resolves to a paginated response of completed tasks.
     */
    TodoistApi.prototype.getCompletedTasksByCompletionDate = function (args) {
        return __awaiter(this, void 0, void 0, function () {
            var _a, items, nextCursor;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, (0, restClient_1.request)('GET', this.syncApiBase, endpoints_1.ENDPOINT_REST_TASKS_COMPLETED_BY_COMPLETION_DATE, this.authToken, args)];
                    case 1:
                        _a = (_b.sent()).data, items = _a.items, nextCursor = _a.nextCursor;
                        return [2 /*return*/, {
                                items: (0, validators_1.validateTaskArray)(items),
                                nextCursor: nextCursor,
                            }];
                }
            });
        });
    };
    /**
     * Retrieves completed tasks by due date.
     *
     * @param args - Parameters for filtering, including required since, until.
     * @returns A promise that resolves to a paginated response of completed tasks.
     */
    TodoistApi.prototype.getCompletedTasksByDueDate = function (args) {
        return __awaiter(this, void 0, void 0, function () {
            var _a, items, nextCursor;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, (0, restClient_1.request)('GET', this.syncApiBase, endpoints_1.ENDPOINT_REST_TASKS_COMPLETED_BY_DUE_DATE, this.authToken, args)];
                    case 1:
                        _a = (_b.sent()).data, items = _a.items, nextCursor = _a.nextCursor;
                        return [2 /*return*/, {
                                items: (0, validators_1.validateTaskArray)(items),
                                nextCursor: nextCursor,
                            }];
                }
            });
        });
    };
    /**
     * Searches completed tasks by query string.
     *
     * @param args - Parameters for searching, including the query string.
     * @returns A promise that resolves to a paginated response of completed tasks.
     */
    TodoistApi.prototype.searchCompletedTasks = function (args) {
        return __awaiter(this, void 0, void 0, function () {
            var _a, items, nextCursor;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, (0, restClient_1.request)('GET', this.syncApiBase, endpoints_1.ENDPOINT_REST_TASKS_COMPLETED_SEARCH, this.authToken, args)];
                    case 1:
                        _a = (_b.sent()).data, items = _a.items, nextCursor = _a.nextCursor;
                        return [2 /*return*/, {
                                items: (0, validators_1.validateTaskArray)(items),
                                nextCursor: nextCursor,
                            }];
                }
            });
        });
    };
    /**
     * Creates a new task with the provided parameters.
     *
     * @param args - Task creation parameters such as content, due date, or priority.
     * @param requestId - Optional custom identifier for the request.
     * @returns A promise that resolves to the created task.
     */
    TodoistApi.prototype.addTask = function (args, requestId) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, (0, restClient_1.request)('POST', this.syncApiBase, endpoints_1.ENDPOINT_REST_TASKS, this.authToken, args, requestId)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, (0, validators_1.validateTask)(response.data)];
                }
            });
        });
    };
    /**
     * Quickly adds a task using natural language processing for due dates.
     *
     * @param args - Quick add task parameters, including content and due date.
     * @returns A promise that resolves to the created task.
     */
    TodoistApi.prototype.quickAddTask = function (args) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, (0, restClient_1.request)('POST', this.syncApiBase, endpoints_1.ENDPOINT_SYNC_QUICK_ADD, this.authToken, args)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, (0, validators_1.validateTask)(response.data)];
                }
            });
        });
    };
    /**
     * Updates an existing task by its ID with the provided parameters.
     *
     * @param id - The unique identifier of the task to update.
     * @param args - Update parameters such as content, priority, or due date.
     * @param requestId - Optional custom identifier for the request.
     * @returns A promise that resolves to the updated task.
     */
    TodoistApi.prototype.updateTask = function (id, args, requestId) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        zod_1.z.string().parse(id);
                        return [4 /*yield*/, (0, restClient_1.request)('POST', this.syncApiBase, generatePath(endpoints_1.ENDPOINT_REST_TASKS, id), this.authToken, args, requestId)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, (0, validators_1.validateTask)(response.data)];
                }
            });
        });
    };
    /**
     * Moves existing tasks by their ID to either a different parent/section/project.
     *
     * @param ids - The unique identifier of the tasks to be moved.
     * @param args - The paramets that should contain only one of projectId, sectionId, or parentId
     * @param requestId - Optional custom identifier for the request.
     * @returns - A promise that resolves to an array of the updated tasks.
     */
    TodoistApi.prototype.moveTasks = function (ids, args, requestId) {
        return __awaiter(this, void 0, void 0, function () {
            var commands, syncRequest, response, syncTasks;
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (ids.length > MAX_COMMAND_COUNT) {
                            throw new types_1.TodoistRequestError("Maximum number of items is ".concat(MAX_COMMAND_COUNT), 400);
                        }
                        commands = ids.map(function (id) { return ({
                            type: 'item_move',
                            uuid: (0, uuid_1.v4)(),
                            args: __assign(__assign(__assign({ id: id }, (args.projectId && { project_id: args.projectId })), (args.sectionId && { section_id: args.sectionId })), (args.parentId && { parent_id: args.parentId })),
                        }); });
                        syncRequest = {
                            commands: commands,
                            resource_types: ['items'],
                        };
                        return [4 /*yield*/, (0, restClient_1.request)('POST', this.syncApiBase, endpoints_1.ENDPOINT_SYNC, this.authToken, syncRequest, requestId, 
                            /*hasSyncCommands: */ true)];
                    case 1:
                        response = _b.sent();
                        if (response.data.sync_status) {
                            Object.entries(response.data.sync_status).forEach(function (_a) {
                                var _ = _a[0], value = _a[1];
                                if (value === 'ok')
                                    return;
                                throw new types_1.TodoistRequestError(value.error, value.http_code, value.error_extra);
                            });
                        }
                        if (!((_a = response.data.items) === null || _a === void 0 ? void 0 : _a.length)) {
                            throw new types_1.TodoistRequestError('Tasks not found', 404);
                        }
                        syncTasks = response.data.items.filter(function (task) { return ids.includes(task.id); });
                        if (!syncTasks.length) {
                            throw new types_1.TodoistRequestError('Tasks not found', 404);
                        }
                        return [2 /*return*/, (0, validators_1.validateTaskArray)(syncTasks)];
                }
            });
        });
    };
    /**
     * Closes (completes) a task by its ID.
     *
     * @param id - The unique identifier of the task to close.
     * @param requestId - Optional custom identifier for the request.
     * @returns A promise that resolves to `true` if successful.
     */
    TodoistApi.prototype.closeTask = function (id, requestId) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        zod_1.z.string().parse(id);
                        return [4 /*yield*/, (0, restClient_1.request)('POST', this.syncApiBase, generatePath(endpoints_1.ENDPOINT_REST_TASKS, id, endpoints_1.ENDPOINT_REST_TASK_CLOSE), this.authToken, undefined, requestId)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, (0, restClient_1.isSuccess)(response)];
                }
            });
        });
    };
    /**
     * Reopens a previously closed (completed) task by its ID.
     *
     * @param id - The unique identifier of the task to reopen.
     * @param requestId - Optional custom identifier for the request.
     * @returns A promise that resolves to `true` if successful.
     */
    TodoistApi.prototype.reopenTask = function (id, requestId) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        zod_1.z.string().parse(id);
                        return [4 /*yield*/, (0, restClient_1.request)('POST', this.syncApiBase, generatePath(endpoints_1.ENDPOINT_REST_TASKS, id, endpoints_1.ENDPOINT_REST_TASK_REOPEN), this.authToken, undefined, requestId)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, (0, restClient_1.isSuccess)(response)];
                }
            });
        });
    };
    /**
     * Deletes a task by its ID.
     *
     * @param id - The unique identifier of the task to delete.
     * @param requestId - Optional custom identifier for the request.
     * @returns A promise that resolves to `true` if successful.
     */
    TodoistApi.prototype.deleteTask = function (id, requestId) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        zod_1.z.string().parse(id);
                        return [4 /*yield*/, (0, restClient_1.request)('DELETE', this.syncApiBase, generatePath(endpoints_1.ENDPOINT_REST_TASKS, id), this.authToken, undefined, requestId)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, (0, restClient_1.isSuccess)(response)];
                }
            });
        });
    };
    /**
     * Retrieves a project by its ID.
     *
     * @param id - The unique identifier of the project.
     * @returns A promise that resolves to the requested project.
     */
    TodoistApi.prototype.getProject = function (id) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        zod_1.z.string().parse(id);
                        return [4 /*yield*/, (0, restClient_1.request)('GET', this.syncApiBase, generatePath(endpoints_1.ENDPOINT_REST_PROJECTS, id), this.authToken)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, (0, validators_1.validateProject)(response.data)];
                }
            });
        });
    };
    /**
     * Retrieves all projects with optional filters.
     *
     * @param args - Optional filters for retrieving projects.
     * @returns A promise that resolves to an array of projects.
     */
    TodoistApi.prototype.getProjects = function () {
        return __awaiter(this, arguments, void 0, function (args) {
            var _a, results, nextCursor;
            if (args === void 0) { args = {}; }
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, (0, restClient_1.request)('GET', this.syncApiBase, endpoints_1.ENDPOINT_REST_PROJECTS, this.authToken, args)];
                    case 1:
                        _a = (_b.sent()).data, results = _a.results, nextCursor = _a.nextCursor;
                        return [2 /*return*/, {
                                results: (0, validators_1.validateProjectArray)(results),
                                nextCursor: nextCursor,
                            }];
                }
            });
        });
    };
    /**
     * Retrieves all archived projects with optional filters.
     *
     * @param args - Optional filters for retrieving archived projects.
     * @returns A promise that resolves to an array of archived projects.
     */
    TodoistApi.prototype.getArchivedProjects = function () {
        return __awaiter(this, arguments, void 0, function (args) {
            var _a, results, nextCursor;
            if (args === void 0) { args = {}; }
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, (0, restClient_1.request)('GET', this.syncApiBase, endpoints_1.ENDPOINT_REST_PROJECTS_ARCHIVED, this.authToken, args)];
                    case 1:
                        _a = (_b.sent()).data, results = _a.results, nextCursor = _a.nextCursor;
                        return [2 /*return*/, {
                                results: (0, validators_1.validateProjectArray)(results),
                                nextCursor: nextCursor,
                            }];
                }
            });
        });
    };
    /**
     * Creates a new project with the provided parameters.
     *
     * @param args - Project creation parameters such as name or color.
     * @param requestId - Optional custom identifier for the request.
     * @returns A promise that resolves to the created project.
     */
    TodoistApi.prototype.addProject = function (args, requestId) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, (0, restClient_1.request)('POST', this.syncApiBase, endpoints_1.ENDPOINT_REST_PROJECTS, this.authToken, args, requestId)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, (0, validators_1.validateProject)(response.data)];
                }
            });
        });
    };
    /**
     * Updates an existing project by its ID with the provided parameters.
     *
     * @param id - The unique identifier of the project to update.
     * @param args - Update parameters such as name or color.
     * @param requestId - Optional custom identifier for the request.
     * @returns A promise that resolves to the updated project.
     */
    TodoistApi.prototype.updateProject = function (id, args, requestId) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        zod_1.z.string().parse(id);
                        return [4 /*yield*/, (0, restClient_1.request)('POST', this.syncApiBase, generatePath(endpoints_1.ENDPOINT_REST_PROJECTS, id), this.authToken, args, requestId)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, (0, validators_1.validateProject)(response.data)];
                }
            });
        });
    };
    /**
     * Deletes a project by its ID.
     *
     * @param id - The unique identifier of the project to delete.
     * @param requestId - Optional custom identifier for the request.
     * @returns A promise that resolves to `true` if successful.
     */
    TodoistApi.prototype.deleteProject = function (id, requestId) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        zod_1.z.string().parse(id);
                        return [4 /*yield*/, (0, restClient_1.request)('DELETE', this.syncApiBase, generatePath(endpoints_1.ENDPOINT_REST_PROJECTS, id), this.authToken, undefined, requestId)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, (0, restClient_1.isSuccess)(response)];
                }
            });
        });
    };
    /**
     * Archives a project by its ID.
     *
     * @param id - The unique identifier of the project to archive.
     * @param requestId - Optional custom identifier for the request.
     * @returns A promise that resolves to the updated project.
     */
    TodoistApi.prototype.archiveProject = function (id, requestId) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        zod_1.z.string().parse(id);
                        return [4 /*yield*/, (0, restClient_1.request)('POST', this.syncApiBase, generatePath(endpoints_1.ENDPOINT_REST_PROJECTS, id, endpoints_1.PROJECT_ARCHIVE), this.authToken, undefined, requestId)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, (0, validators_1.validateProject)(response.data)];
                }
            });
        });
    };
    /**
     * Unarchives a project by its ID.
     *
     * @param id - The unique identifier of the project to unarchive.
     * @param requestId - Optional custom identifier for the request.
     * @returns A promise that resolves to the updated project.
     */
    TodoistApi.prototype.unarchiveProject = function (id, requestId) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        zod_1.z.string().parse(id);
                        return [4 /*yield*/, (0, restClient_1.request)('POST', this.syncApiBase, generatePath(endpoints_1.ENDPOINT_REST_PROJECTS, id, endpoints_1.PROJECT_UNARCHIVE), this.authToken, undefined, requestId)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, (0, validators_1.validateProject)(response.data)];
                }
            });
        });
    };
    /**
     * Retrieves a list of collaborators for a specific project.
     *
     * @param projectId - The unique identifier of the project.
     * @param args - Optional parameters to filter collaborators.
     * @returns A promise that resolves to an array of collaborators for the project.
     */
    TodoistApi.prototype.getProjectCollaborators = function (projectId_1) {
        return __awaiter(this, arguments, void 0, function (projectId, args) {
            var _a, results, nextCursor;
            if (args === void 0) { args = {}; }
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        zod_1.z.string().parse(projectId);
                        return [4 /*yield*/, (0, restClient_1.request)('GET', this.syncApiBase, generatePath(endpoints_1.ENDPOINT_REST_PROJECTS, projectId, endpoints_1.ENDPOINT_REST_PROJECT_COLLABORATORS), this.authToken, args)];
                    case 1:
                        _a = (_b.sent()).data, results = _a.results, nextCursor = _a.nextCursor;
                        return [2 /*return*/, {
                                results: (0, validators_1.validateUserArray)(results),
                                nextCursor: nextCursor,
                            }];
                }
            });
        });
    };
    /**
     * Retrieves all sections within a specific project or matching criteria.
     *
     * @param args - Filter parameters such as project ID.
     * @returns A promise that resolves to an array of sections.
     */
    TodoistApi.prototype.getSections = function (args) {
        return __awaiter(this, void 0, void 0, function () {
            var _a, results, nextCursor;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, (0, restClient_1.request)('GET', this.syncApiBase, endpoints_1.ENDPOINT_REST_SECTIONS, this.authToken, args)];
                    case 1:
                        _a = (_b.sent()).data, results = _a.results, nextCursor = _a.nextCursor;
                        return [2 /*return*/, {
                                results: (0, validators_1.validateSectionArray)(results),
                                nextCursor: nextCursor,
                            }];
                }
            });
        });
    };
    /**
     * Retrieves a single section by its ID.
     *
     * @param id - The unique identifier of the section.
     * @returns A promise that resolves to the requested section.
     */
    TodoistApi.prototype.getSection = function (id) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        zod_1.z.string().parse(id);
                        return [4 /*yield*/, (0, restClient_1.request)('GET', this.syncApiBase, generatePath(endpoints_1.ENDPOINT_REST_SECTIONS, id), this.authToken)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, (0, validators_1.validateSection)(response.data)];
                }
            });
        });
    };
    /**
     * Creates a new section within a project.
     *
     * @param args - Section creation parameters such as name or project ID.
     * @param requestId - Optional custom identifier for the request.
     * @returns A promise that resolves to the created section.
     */
    TodoistApi.prototype.addSection = function (args, requestId) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, (0, restClient_1.request)('POST', this.syncApiBase, endpoints_1.ENDPOINT_REST_SECTIONS, this.authToken, args, requestId)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, (0, validators_1.validateSection)(response.data)];
                }
            });
        });
    };
    /**
     * Updates a section by its ID with the provided parameters.
     *
     * @param id - The unique identifier of the section to update.
     * @param args - Update parameters such as name or project ID.
     * @param requestId - Optional custom identifier for the request.
     * @returns A promise that resolves to the updated section.
     */
    TodoistApi.prototype.updateSection = function (id, args, requestId) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        zod_1.z.string().parse(id);
                        return [4 /*yield*/, (0, restClient_1.request)('POST', this.syncApiBase, generatePath(endpoints_1.ENDPOINT_REST_SECTIONS, id), this.authToken, args, requestId)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, (0, validators_1.validateSection)(response.data)];
                }
            });
        });
    };
    /**
     * Deletes a section by its ID.
     *
     * @param id - The unique identifier of the section to delete.
     * @param requestId - Optional custom identifier for the request.
     * @returns A promise that resolves to `true` if successful.
     */
    TodoistApi.prototype.deleteSection = function (id, requestId) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        zod_1.z.string().parse(id);
                        return [4 /*yield*/, (0, restClient_1.request)('DELETE', this.syncApiBase, generatePath(endpoints_1.ENDPOINT_REST_SECTIONS, id), this.authToken, undefined, requestId)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, (0, restClient_1.isSuccess)(response)];
                }
            });
        });
    };
    /**
     * Retrieves a label by its ID.
     *
     * @param id - The unique identifier of the label.
     * @returns A promise that resolves to the requested label.
     */
    TodoistApi.prototype.getLabel = function (id) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        zod_1.z.string().parse(id);
                        return [4 /*yield*/, (0, restClient_1.request)('GET', this.syncApiBase, generatePath(endpoints_1.ENDPOINT_REST_LABELS, id), this.authToken)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, (0, validators_1.validateLabel)(response.data)];
                }
            });
        });
    };
    /**
     * Retrieves all labels.
     *
     * @param args - Optional filter parameters.
     * @returns A promise that resolves to an array of labels.
     */
    TodoistApi.prototype.getLabels = function () {
        return __awaiter(this, arguments, void 0, function (args) {
            var _a, results, nextCursor;
            if (args === void 0) { args = {}; }
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, (0, restClient_1.request)('GET', this.syncApiBase, endpoints_1.ENDPOINT_REST_LABELS, this.authToken, args)];
                    case 1:
                        _a = (_b.sent()).data, results = _a.results, nextCursor = _a.nextCursor;
                        return [2 /*return*/, {
                                results: (0, validators_1.validateLabelArray)(results),
                                nextCursor: nextCursor,
                            }];
                }
            });
        });
    };
    /**
     * Adds a new label.
     *
     * @param args - Label creation parameters such as name.
     * @param requestId - Optional custom identifier for the request.
     * @returns A promise that resolves to the created label.
     */
    TodoistApi.prototype.addLabel = function (args, requestId) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, (0, restClient_1.request)('POST', this.syncApiBase, endpoints_1.ENDPOINT_REST_LABELS, this.authToken, args, requestId)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, (0, validators_1.validateLabel)(response.data)];
                }
            });
        });
    };
    /**
     * Updates an existing label by its ID.
     *
     * @param id - The unique identifier of the label to update.
     * @param args - Update parameters such as name or color.
     * @param requestId - Optional custom identifier for the request.
     * @returns A promise that resolves to the updated label.
     */
    TodoistApi.prototype.updateLabel = function (id, args, requestId) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        zod_1.z.string().parse(id);
                        return [4 /*yield*/, (0, restClient_1.request)('POST', this.syncApiBase, generatePath(endpoints_1.ENDPOINT_REST_LABELS, id), this.authToken, args, requestId)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, (0, validators_1.validateLabel)(response.data)];
                }
            });
        });
    };
    /**
     * Deletes a label by its ID.
     *
     * @param id - The unique identifier of the label to delete.
     * @param requestId - Optional custom identifier for the request.
     * @returns A promise that resolves to `true` if successful.
     */
    TodoistApi.prototype.deleteLabel = function (id, requestId) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        zod_1.z.string().parse(id);
                        return [4 /*yield*/, (0, restClient_1.request)('DELETE', this.syncApiBase, generatePath(endpoints_1.ENDPOINT_REST_LABELS, id), this.authToken, undefined, requestId)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, (0, restClient_1.isSuccess)(response)];
                }
            });
        });
    };
    /**
     * Retrieves a list of shared labels.
     *
     * @param args - Optional parameters to filter shared labels.
     * @returns A promise that resolves to an array of shared labels.
     */
    TodoistApi.prototype.getSharedLabels = function (args) {
        return __awaiter(this, void 0, void 0, function () {
            var _a, results, nextCursor;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, (0, restClient_1.request)('GET', this.syncApiBase, endpoints_1.ENDPOINT_REST_LABELS_SHARED, this.authToken, args)];
                    case 1:
                        _a = (_b.sent()).data, results = _a.results, nextCursor = _a.nextCursor;
                        return [2 /*return*/, { results: results, nextCursor: nextCursor }];
                }
            });
        });
    };
    /**
     * Renames an existing shared label.
     *
     * @param args - Parameters for renaming the shared label, including the current and new name.
     * @returns A promise that resolves to `true` if successful.
     */
    TodoistApi.prototype.renameSharedLabel = function (args) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, (0, restClient_1.request)('POST', this.syncApiBase, endpoints_1.ENDPOINT_REST_LABELS_SHARED_RENAME, this.authToken, args)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, (0, restClient_1.isSuccess)(response)];
                }
            });
        });
    };
    /**
     * Removes a shared label.
     *
     * @param args - Parameters for removing the shared label.
     * @returns A promise that resolves to `true` if successful.
     */
    TodoistApi.prototype.removeSharedLabel = function (args) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, (0, restClient_1.request)('POST', this.syncApiBase, endpoints_1.ENDPOINT_REST_LABELS_SHARED_REMOVE, this.authToken, args)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, (0, restClient_1.isSuccess)(response)];
                }
            });
        });
    };
    /**
     * Retrieves all comments associated with a task or project.
     *
     * @param args - Parameters for retrieving comments, such as task ID or project ID.
     * @returns A promise that resolves to an array of comments.
     */
    TodoistApi.prototype.getComments = function (args) {
        return __awaiter(this, void 0, void 0, function () {
            var _a, results, nextCursor;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, (0, restClient_1.request)('GET', this.syncApiBase, endpoints_1.ENDPOINT_REST_COMMENTS, this.authToken, args)];
                    case 1:
                        _a = (_b.sent()).data, results = _a.results, nextCursor = _a.nextCursor;
                        return [2 /*return*/, {
                                results: (0, validators_1.validateCommentArray)(results),
                                nextCursor: nextCursor,
                            }];
                }
            });
        });
    };
    /**
     * Retrieves a specific comment by its ID.
     *
     * @param id - The unique identifier of the comment to retrieve.
     * @returns A promise that resolves to the requested comment.
     */
    TodoistApi.prototype.getComment = function (id) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        zod_1.z.string().parse(id);
                        return [4 /*yield*/, (0, restClient_1.request)('GET', this.syncApiBase, generatePath(endpoints_1.ENDPOINT_REST_COMMENTS, id), this.authToken)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, (0, validators_1.validateComment)(response.data)];
                }
            });
        });
    };
    /**
     * Adds a comment to a task or project.
     *
     * @param args - Parameters for creating the comment, such as content and the target task or project ID.
     * @param requestId - Optional custom identifier for the request.
     * @returns A promise that resolves to the created comment.
     */
    TodoistApi.prototype.addComment = function (args, requestId) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, (0, restClient_1.request)('POST', this.syncApiBase, endpoints_1.ENDPOINT_REST_COMMENTS, this.authToken, args, requestId)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, (0, validators_1.validateComment)(response.data)];
                }
            });
        });
    };
    /**
     * Updates an existing comment by its ID.
     *
     * @param id - The unique identifier of the comment to update.
     * @param args - Update parameters such as new content.
     * @param requestId - Optional custom identifier for the request.
     * @returns A promise that resolves to the updated comment.
     */
    TodoistApi.prototype.updateComment = function (id, args, requestId) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        zod_1.z.string().parse(id);
                        return [4 /*yield*/, (0, restClient_1.request)('POST', this.syncApiBase, generatePath(endpoints_1.ENDPOINT_REST_COMMENTS, id), this.authToken, args, requestId)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, (0, validators_1.validateComment)(response.data)];
                }
            });
        });
    };
    /**
     * Deletes a comment by its ID.
     *
     * @param id - The unique identifier of the comment to delete.
     * @param requestId - Optional custom identifier for the request.
     * @returns A promise that resolves to `true` if successful.
     */
    TodoistApi.prototype.deleteComment = function (id, requestId) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        zod_1.z.string().parse(id);
                        return [4 /*yield*/, (0, restClient_1.request)('DELETE', this.syncApiBase, generatePath(endpoints_1.ENDPOINT_REST_COMMENTS, id), this.authToken, undefined, requestId)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, (0, restClient_1.isSuccess)(response)];
                }
            });
        });
    };
    /**
     * Retrieves productivity stats for the authenticated user.
     *
     * @returns A promise that resolves to the productivity stats.
     */
    TodoistApi.prototype.getProductivityStats = function () {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, (0, restClient_1.request)('GET', this.syncApiBase, endpoints_1.ENDPOINT_REST_PRODUCTIVITY, this.authToken)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, (0, validators_1.validateProductivityStats)(response.data)];
                }
            });
        });
    };
    /**
     * Retrieves activity logs with optional filters.
     *
     * @param args - Optional filter parameters for activity logs.
     * @returns A promise that resolves to a paginated response of activity events.
     */
    TodoistApi.prototype.getActivityLogs = function () {
        return __awaiter(this, arguments, void 0, function (args) {
            var processedArgs, _a, results, nextCursor, normalizedResults;
            if (args === void 0) { args = {}; }
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        processedArgs = __assign(__assign(__assign(__assign({}, args), (args.since instanceof Date && { since: (0, urlHelpers_1.formatDateToYYYYMMDD)(args.since) })), (args.until instanceof Date && { until: (0, urlHelpers_1.formatDateToYYYYMMDD)(args.until) })), (args.objectType && { objectType: (0, activity_helpers_1.normalizeObjectTypeForApi)(args.objectType) }));
                        return [4 /*yield*/, (0, restClient_1.request)('GET', this.syncApiBase, endpoints_1.ENDPOINT_REST_ACTIVITIES, this.authToken, processedArgs)
                            // Convert legacy API object types back to modern SDK types
                        ];
                    case 1:
                        _a = (_b.sent()).data, results = _a.results, nextCursor = _a.nextCursor;
                        normalizedResults = results.map(function (event) {
                            var normalizedType = (0, activity_helpers_1.denormalizeObjectTypeFromApi)(event.objectType);
                            return __assign(__assign({}, event), { objectType: normalizedType || event.objectType });
                        });
                        return [2 /*return*/, {
                                results: (0, validators_1.validateActivityEventArray)(normalizedResults),
                                nextCursor: nextCursor,
                            }];
                }
            });
        });
    };
    return TodoistApi;
}());
exports.TodoistApi = TodoistApi;
