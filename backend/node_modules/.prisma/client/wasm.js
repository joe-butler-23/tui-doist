
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  PrismaClientKnownRequestError,
  PrismaClientUnknownRequestError,
  PrismaClientRustPanicError,
  PrismaClientInitializationError,
  PrismaClientValidationError,
  getPrismaClient,
  sqltag,
  empty,
  join,
  raw,
  skip,
  Decimal,
  Debug,
  objectEnumValues,
  makeStrictEnum,
  Extensions,
  warnOnce,
  defineDmmfProperty,
  Public,
  getRuntime,
  createParam,
} = require('@prisma/client/runtime/wasm-engine-edge.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.17.1
 * Query Engine version: 272a37d34178c2894197e17273bf937f25acdeac
 */
Prisma.prismaVersion = {
  client: "6.17.1",
  engine: "272a37d34178c2894197e17273bf937f25acdeac"
}

Prisma.PrismaClientKnownRequestError = PrismaClientKnownRequestError;
Prisma.PrismaClientUnknownRequestError = PrismaClientUnknownRequestError
Prisma.PrismaClientRustPanicError = PrismaClientRustPanicError
Prisma.PrismaClientInitializationError = PrismaClientInitializationError
Prisma.PrismaClientValidationError = PrismaClientValidationError
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = sqltag
Prisma.empty = empty
Prisma.join = join
Prisma.raw = raw
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = Extensions.getExtensionContext
Prisma.defineExtension = Extensions.defineExtension

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}





/**
 * Enums
 */
exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  Serializable: 'Serializable'
});

exports.Prisma.ProjectScalarFieldEnum = {
  id: 'id',
  name: 'name',
  color: 'color',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  todoistId: 'todoistId',
  syncStatus: 'syncStatus'
};

exports.Prisma.YearScalarFieldEnum = {
  id: 'id',
  year: 'year',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.WeekScalarFieldEnum = {
  id: 'id',
  yearId: 'yearId',
  weekNumber: 'weekNumber',
  startDate: 'startDate',
  endDate: 'endDate',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.DayScalarFieldEnum = {
  id: 'id',
  weekId: 'weekId',
  date: 'date',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TaskScalarFieldEnum = {
  id: 'id',
  text: 'text',
  completed: 'completed',
  priority: 'priority',
  notes: 'notes',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  dueDate: 'dueDate',
  projectId: 'projectId',
  todoistId: 'todoistId',
  syncStatus: 'syncStatus',
  metadata: 'metadata',
  parentId: 'parentId'
};

exports.Prisma.TaskOnDayScalarFieldEnum = {
  id: 'id',
  taskId: 'taskId',
  dayId: 'dayId'
};

exports.Prisma.SyncLogScalarFieldEnum = {
  id: 'id',
  entityType: 'entityType',
  entityId: 'entityId',
  action: 'action',
  direction: 'direction',
  todoistId: 'todoistId',
  timestamp: 'timestamp',
  errorMessage: 'errorMessage',
  projectId: 'projectId',
  taskId: 'taskId'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};
exports.SyncStatus = exports.$Enums.SyncStatus = {
  SYNCED: 'SYNCED',
  PENDING_UPLOAD: 'PENDING_UPLOAD',
  PENDING_DOWNLOAD: 'PENDING_DOWNLOAD',
  CONFLICT: 'CONFLICT',
  ERROR: 'ERROR'
};

exports.SyncAction = exports.$Enums.SyncAction = {
  CREATE: 'CREATE',
  UPDATE: 'UPDATE',
  DELETE: 'DELETE'
};

exports.SyncDirection = exports.$Enums.SyncDirection = {
  TO_TODOIST: 'TO_TODOIST',
  FROM_TODOIST: 'FROM_TODOIST',
  LOCAL_ONLY: 'LOCAL_ONLY'
};

exports.Prisma.ModelName = {
  Project: 'Project',
  Year: 'Year',
  Week: 'Week',
  Day: 'Day',
  Task: 'Task',
  TaskOnDay: 'TaskOnDay',
  SyncLog: 'SyncLog'
};
/**
 * Create the Client
 */
const config = {
  "generator": {
    "name": "client",
    "provider": {
      "fromEnvVar": null,
      "value": "prisma-client-js"
    },
    "output": {
      "value": "/home/joebutler/development/tuiist/backend/node_modules/@prisma/client",
      "fromEnvVar": null
    },
    "config": {
      "engineType": "library"
    },
    "binaryTargets": [
      {
        "fromEnvVar": null,
        "value": "debian-openssl-3.0.x",
        "native": true
      }
    ],
    "previewFeatures": [],
    "sourceFilePath": "/home/joebutler/development/tuiist/backend/prisma/schema.prisma"
  },
  "relativeEnvPaths": {
    "rootEnvPath": null,
    "schemaEnvPath": "../../../.env"
  },
  "relativePath": "../../../prisma",
  "clientVersion": "6.17.1",
  "engineVersion": "272a37d34178c2894197e17273bf937f25acdeac",
  "datasourceNames": [
    "db"
  ],
  "activeProvider": "sqlite",
  "inlineDatasources": {
    "db": {
      "url": {
        "fromEnvVar": "DATABASE_URL",
        "value": null
      }
    }
  },
  "inlineSchema": "// This is your Prisma schema file,\n// learn more about it in the docs: https://pris.ly/d/prisma-schema\n\ngenerator client {\n  provider = \"prisma-client-js\"\n}\n\ndatasource db {\n  provider = \"sqlite\"\n  url      = env(\"DATABASE_URL\")\n}\n\nmodel Project {\n  id         String     @id @default(cuid())\n  name       String\n  color      String     @default(\"blue\")\n  createdAt  DateTime   @default(now())\n  updatedAt  DateTime   @updatedAt\n  todoistId  String?    @unique // Todoist project ID for sync\n  syncStatus SyncStatus @default(SYNCED)\n\n  tasks   Task[]\n  syncLog SyncLog[]\n\n  @@map(\"projects\")\n}\n\nmodel Year {\n  id        String   @id @default(cuid())\n  year      Int      @unique\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n\n  weeks Week[]\n\n  @@map(\"years\")\n}\n\nmodel Week {\n  id         String   @id @default(cuid())\n  yearId     String\n  year       Year     @relation(fields: [yearId], references: [id], onDelete: Cascade)\n  weekNumber Int\n  startDate  DateTime\n  endDate    DateTime\n  createdAt  DateTime @default(now())\n  updatedAt  DateTime @updatedAt\n\n  days Day[]\n\n  @@unique([yearId, weekNumber])\n  @@map(\"weeks\")\n}\n\nmodel Day {\n  id        String   @id @default(cuid())\n  weekId    String\n  week      Week     @relation(fields: [weekId], references: [id], onDelete: Cascade)\n  date      DateTime @unique\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n\n  tasks TaskOnDay[]\n\n  @@map(\"days\")\n}\n\nmodel Task {\n  id        String    @id @default(cuid())\n  text      String\n  completed Boolean   @default(false)\n  priority  Int       @default(2) // 1-4 priority levels\n  notes     String?   @default(\"\")\n  createdAt DateTime  @default(now())\n  updatedAt DateTime  @updatedAt\n  dueDate   DateTime?\n\n  projectId  String\n  project    Project    @relation(fields: [projectId], references: [id], onDelete: Cascade)\n  todoistId  String?    @unique // Todoist task ID for sync\n  syncStatus SyncStatus @default(SYNCED)\n\n  metadata Json? // Flexible metadata for task parsing\n\n  // Hierarchical structure support\n  parentId String?\n  parent   Task?   @relation(\"TaskHierarchy\", fields: [parentId], references: [id], onDelete: Cascade)\n  children Task[]  @relation(\"TaskHierarchy\")\n\n  // Date assignment support\n  assignedDays TaskOnDay[]\n\n  syncLog SyncLog[]\n\n  @@map(\"tasks\")\n}\n\nmodel TaskOnDay {\n  id     String @id @default(cuid())\n  taskId String\n  task   Task   @relation(fields: [taskId], references: [id], onDelete: Cascade)\n  dayId  String\n  day    Day    @relation(fields: [dayId], references: [id], onDelete: Cascade)\n\n  @@unique([taskId, dayId])\n  @@map(\"tasks_on_days\")\n}\n\nmodel SyncLog {\n  id           String        @id @default(cuid())\n  entityType   String // \"project\" or \"task\"\n  entityId     String\n  action       SyncAction\n  direction    SyncDirection\n  todoistId    String?\n  timestamp    DateTime      @default(now())\n  errorMessage String?\n\n  // Only one of these will be set based on entityType\n  projectId String?\n  project   Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)\n  taskId    String?\n  task      Task?    @relation(fields: [taskId], references: [id], onDelete: Cascade)\n\n  @@map(\"sync_logs\")\n}\n\nenum SyncStatus {\n  SYNCED\n  PENDING_UPLOAD\n  PENDING_DOWNLOAD\n  CONFLICT\n  ERROR\n}\n\nenum SyncAction {\n  CREATE\n  UPDATE\n  DELETE\n}\n\nenum SyncDirection {\n  TO_TODOIST\n  FROM_TODOIST\n  LOCAL_ONLY\n}\n",
  "inlineSchemaHash": "f2e089bbab8e11f3ecd8032b2081fce42776c21ca43455dc5c55f672fd431648",
  "copyEngine": true
}
config.dirname = '/'

config.runtimeDataModel = JSON.parse("{\"models\":{\"Project\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"color\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"todoistId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"syncStatus\",\"kind\":\"enum\",\"type\":\"SyncStatus\"},{\"name\":\"tasks\",\"kind\":\"object\",\"type\":\"Task\",\"relationName\":\"ProjectToTask\"},{\"name\":\"syncLog\",\"kind\":\"object\",\"type\":\"SyncLog\",\"relationName\":\"ProjectToSyncLog\"}],\"dbName\":\"projects\"},\"Year\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"year\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"weeks\",\"kind\":\"object\",\"type\":\"Week\",\"relationName\":\"WeekToYear\"}],\"dbName\":\"years\"},\"Week\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"yearId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"year\",\"kind\":\"object\",\"type\":\"Year\",\"relationName\":\"WeekToYear\"},{\"name\":\"weekNumber\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"startDate\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"endDate\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"days\",\"kind\":\"object\",\"type\":\"Day\",\"relationName\":\"DayToWeek\"}],\"dbName\":\"weeks\"},\"Day\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"weekId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"week\",\"kind\":\"object\",\"type\":\"Week\",\"relationName\":\"DayToWeek\"},{\"name\":\"date\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"tasks\",\"kind\":\"object\",\"type\":\"TaskOnDay\",\"relationName\":\"DayToTaskOnDay\"}],\"dbName\":\"days\"},\"Task\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"text\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"completed\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"priority\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"notes\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"dueDate\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"projectId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"project\",\"kind\":\"object\",\"type\":\"Project\",\"relationName\":\"ProjectToTask\"},{\"name\":\"todoistId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"syncStatus\",\"kind\":\"enum\",\"type\":\"SyncStatus\"},{\"name\":\"metadata\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"parentId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"parent\",\"kind\":\"object\",\"type\":\"Task\",\"relationName\":\"TaskHierarchy\"},{\"name\":\"children\",\"kind\":\"object\",\"type\":\"Task\",\"relationName\":\"TaskHierarchy\"},{\"name\":\"assignedDays\",\"kind\":\"object\",\"type\":\"TaskOnDay\",\"relationName\":\"TaskToTaskOnDay\"},{\"name\":\"syncLog\",\"kind\":\"object\",\"type\":\"SyncLog\",\"relationName\":\"SyncLogToTask\"}],\"dbName\":\"tasks\"},\"TaskOnDay\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"taskId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"task\",\"kind\":\"object\",\"type\":\"Task\",\"relationName\":\"TaskToTaskOnDay\"},{\"name\":\"dayId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"day\",\"kind\":\"object\",\"type\":\"Day\",\"relationName\":\"DayToTaskOnDay\"}],\"dbName\":\"tasks_on_days\"},\"SyncLog\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"entityType\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"entityId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"action\",\"kind\":\"enum\",\"type\":\"SyncAction\"},{\"name\":\"direction\",\"kind\":\"enum\",\"type\":\"SyncDirection\"},{\"name\":\"todoistId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"timestamp\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"errorMessage\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"projectId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"project\",\"kind\":\"object\",\"type\":\"Project\",\"relationName\":\"ProjectToSyncLog\"},{\"name\":\"taskId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"task\",\"kind\":\"object\",\"type\":\"Task\",\"relationName\":\"SyncLogToTask\"}],\"dbName\":\"sync_logs\"}},\"enums\":{},\"types\":{}}")
defineDmmfProperty(exports.Prisma, config.runtimeDataModel)
config.engineWasm = {
  getRuntime: async () => require('./query_engine_bg.js'),
  getQueryEngineWasmModule: async () => {
    const loader = (await import('#wasm-engine-loader')).default
    const engine = (await loader).default
    return engine
  }
}
config.compilerWasm = undefined

config.injectableEdgeEnv = () => ({
  parsed: {
    DATABASE_URL: typeof globalThis !== 'undefined' && globalThis['DATABASE_URL'] || typeof process !== 'undefined' && process.env && process.env.DATABASE_URL || undefined
  }
})

if (typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined) {
  Debug.enable(typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined)
}

const PrismaClient = getPrismaClient(config)
exports.PrismaClient = PrismaClient
Object.assign(exports, Prisma)

