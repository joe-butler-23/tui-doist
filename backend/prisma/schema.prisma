// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Project {
  id          String   @id @default(cuid())
  name        String
  color       String   @default("blue")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  todoistId   String?  @unique // Todoist project ID for sync
  syncStatus  SyncStatus @default(SYNCED)
  
  tasks       Task[]
  syncLog     SyncLog[]

  @@map("projects")
}

model Year {
  id        String   @id @default(cuid())
  year      Int      @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  weeks     Week[]

  @@map("years")
}

model Week {
  id        String   @id @default(cuid())
  yearId    String
  year      Year     @relation(fields: [yearId], references: [id], onDelete: Cascade)
  weekNumber Int
  startDate DateTime
  endDate   DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  days      Day[]

  @@unique([yearId, weekNumber])
  @@map("weeks")
}

model Day {
  id        String   @id @default(cuid())
  weekId    String
  week      Week     @relation(fields: [weekId], references: [id], onDelete: Cascade)
  date      DateTime @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tasks     TaskOnDay[]

  @@map("days")
}

model Task {
  id          String   @id @default(cuid())
  text        String
  completed   Boolean  @default(false)
  priority    Int      @default(2) // 1-4 priority levels
  notes       String?  @default("")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  dueDate     DateTime?

  projectId   String
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  todoistId   String?  @unique // Todoist task ID for sync
  syncStatus  SyncStatus @default(SYNCED)

  metadata    Json?    // Flexible metadata for task parsing

  // Hierarchical structure support
  parentId    String?
  parent      Task?    @relation("TaskHierarchy", fields: [parentId], references: [id], onDelete: Cascade)
  children    Task[]   @relation("TaskHierarchy")

  // Date assignment support
  assignedDays TaskOnDay[]

  syncLog     SyncLog[]

  @@map("tasks")
}

model TaskOnDay {
  id     String @id @default(cuid())
  taskId String
  task   Task   @relation(fields: [taskId], references: [id], onDelete: Cascade)
  dayId  String
  day    Day    @relation(fields: [dayId], references: [id], onDelete: Cascade)

  @@unique([taskId, dayId])
  @@map("tasks_on_days")
}

model SyncLog {
  id          String   @id @default(cuid())
  entityType  String   // "project" or "task"
  entityId    String
  action      SyncAction
  direction   SyncDirection
  todoistId   String?
  timestamp   DateTime @default(now())
  errorMessage String?

  // Only one of these will be set based on entityType
  projectId   String?
  project     Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)
  taskId      String?
  task        Task?    @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@map("sync_logs")
}

enum SyncStatus {
  SYNCED
  PENDING_UPLOAD
  PENDING_DOWNLOAD
  CONFLICT
  ERROR
}

enum SyncAction {
  CREATE
  UPDATE
  DELETE
}

enum SyncDirection {
  TO_TODOIST
  FROM_TODOIST
  LOCAL_ONLY
}
